"""add leave_open_for columns to lanes

Revision ID: a3ddae4afb86
Revises: 353a64a894b7
Create Date: 2025-04-23 16:47:32.386233

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a3ddae4afb86'
down_revision = '353a64a894b7'
branch_labels = None
depends_on = None

def upgrade():
    # Add columns as nullable first
    with op.batch_alter_table('lanes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('leave_open_for_option', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('leave_open_for_number', sa.Numeric(precision=100), nullable=True))
    
    # Set default values for existing rows
    op.execute("UPDATE lanes SET leave_open_for_option = 'hours' WHERE leave_open_for_option IS NULL")
    op.execute("UPDATE lanes SET leave_open_for_number = 0 WHERE leave_open_for_number IS NULL")
    
    # Now alter columns to be NOT NULL
    with op.batch_alter_table('lanes', schema=None) as batch_op:
        batch_op.alter_column('leave_open_for_option', nullable=False)
        batch_op.alter_column('leave_open_for_number', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('lanes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('open_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('open_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.alter_column('additional_stops',
               existing_type=sa.Integer(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.drop_column('leave_open_for_number')
        batch_op.drop_column('leave_open_for_option')

    # ### end Alembic commands ###
