"""Updated user and carrier models

Revision ID: 6c80c8109685
Revises: 49597d534e56
Create Date: 2025-04-25 11:48:38.367676

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = '6c80c8109685'
down_revision = '49597d534e56'
branch_labels = None
depends_on = None

def check_column_exists(table_name, column_name):
    conn = op.get_bind()
    inspector = inspect(conn)
    columns = inspector.get_columns(table_name)
    return any(col['name'] == column_name for col in columns)

def check_foreign_key_exists(table_name, column_name):
    conn = op.get_bind()
    inspector = inspect(conn)
    foreign_keys = inspector.get_foreign_keys(table_name)
    return any(fk['constrained_columns'] == [column_name] for fk in foreign_keys)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Handle carrier_shipper table modifications
    if not check_column_exists('carrier_shipper', 'carrier_user_id'):
        with op.batch_alter_table('carrier_shipper', schema=None) as batch_op:
            batch_op.add_column(sa.Column('carrier_user_id', sa.Integer(), nullable=True))
    
    if not check_foreign_key_exists('carrier_shipper', 'carrier_user_id'):
        op.create_foreign_key(
            'fk_carrier_shipper_user',
            'carrier_shipper',
            'users',
            ['carrier_user_id'],
            ['id']
        )

    # Handle carriers table modifications
    if not check_column_exists('carriers', 'primary_user_id'):
        op.add_column('carriers', sa.Column('primary_user_id', sa.Integer(), nullable=True))
    
    if not check_column_exists('carriers', 'deleted'):
        op.add_column('carriers', sa.Column('deleted', sa.Boolean(), nullable=True))
    
    # Commit to ensure columns exist before updating
    op.execute("COMMIT")
    
    # Populate primary_user_id from existing user_id if available
    if check_column_exists('carriers', 'user_id'):
        op.execute("""
            UPDATE carriers 
            SET primary_user_id = user_id 
            WHERE user_id IS NOT NULL
        """)
    
    # Set default for any remaining nulls
    op.execute("""
        UPDATE carriers 
        SET primary_user_id = (SELECT id FROM users WHERE role = 'CarrierAdmin' LIMIT 1) 
        WHERE primary_user_id IS NULL
    """)
    
    # Now make the column NOT NULL
    op.alter_column('carriers', 'primary_user_id', nullable=False)
    
    # Create indexes if they don't exist
    op.create_index('idx_carrier_name', 'carriers', ['carrier_name'], unique=False, if_not_exists=True)
    op.create_index('idx_carrier_primary_user', 'carriers', ['primary_user_id'], unique=False, if_not_exists=True)
    
    # Drop old foreign key if it exists
    if check_foreign_key_exists('carriers', 'user_id'):
        op.drop_constraint('carriers_user_id_fkey', 'carriers', type_='foreignkey')
    
    # Create new foreign key
    if not check_foreign_key_exists('carriers', 'primary_user_id'):
        op.create_foreign_key(
            'fk_carriers_primary_user',
            'carriers',
            'users',
            ['primary_user_id'],
            ['id']
        )
    
    # Drop old user_id column if it exists
    if check_column_exists('carriers', 'user_id'):
        op.drop_column('carriers', 'user_id')

    # Handle users table modifications
    if not check_column_exists('users', 'carrier_id'):
        op.add_column('users', sa.Column('carrier_id', sa.Integer(), nullable=True))
    
    # Create indexes with if_not_exists
    op.create_index('idx_user_carrier', 'users', ['carrier_id'], unique=False, if_not_exists=True)
    op.create_index('idx_user_email', 'users', ['email'], unique=False, if_not_exists=True)
    
    # Create unique constraint if it doesn't exist
    op.create_unique_constraint('uq_user_email', 'users', ['email'], if_not_exists=True)
    
    # Create foreign key if it doesn't exist
    if not check_foreign_key_exists('users', 'carrier_id'):
        op.create_foreign_key(
            'fk_user_carrier',
            'users',
            'carriers',
            ['carrier_id'],
            ['id']
        )

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Handle users table rollback
    op.drop_constraint('fk_user_carrier', 'users', type_='foreignkey')
    op.drop_constraint('uq_user_email', 'users', type_='unique')
    op.drop_index('idx_user_email', table_name='users')
    op.drop_index('idx_user_carrier', table_name='users')
    op.drop_column('users', 'carrier_id')

    # Handle carriers table rollback
    op.add_column('carriers', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint('fk_carriers_primary_user', 'carriers', type_='foreignkey')
    op.drop_index('idx_carrier_primary_user', table_name='carriers')
    op.drop_index('idx_carrier_name', table_name='carriers')
    op.drop_column('carriers', 'primary_user_id')
    op.drop_column('carriers', 'deleted')
    op.create_foreign_key(
        'carriers_user_id_fkey',
        'carriers',
        'users',
        ['user_id'],
        ['id']
    )

    # Handle carrier_shipper table rollback
    op.drop_constraint('fk_carrier_shipper_user', 'carrier_shipper', type_='foreignkey')
    op.drop_column('carrier_shipper', 'carrier_user_id')

    # ### end Alembic commands ###